package org.childstore.ui;

import org.childstore.model.Product;
import org.childstore.service.ProductService;
import java.util.Map;
import java.util.HashMap;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import java.util.List;
import java.util.Scanner;

public class DirectorMenu {
    private final ProductService productService = new ProductService();
    private final Scanner scanner = new Scanner(System.in);

    public void show() {
        while (true) {
            System.out.println("\n –ú–µ–Ω—é –î–∏—Ä–µ–∫—Ç–æ—Ä–∞:");
            System.out.println("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤");
            System.out.println("2. –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä");
            System.out.println("3. –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID");
            System.out.println("4. –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ —Ü–µ–Ω–µ");
            System.out.println("5. –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º");
            System.out.println("6. –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ CSV");
            System.out.println("7. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID");
            System.out.println("0. –í—ã—Ö–æ–¥");

            System.out.print("–í–∞—à –≤—ã–±–æ—Ä: ");
            String choice = scanner.nextLine();

            switch (choice) {
                case "1":
                    showAllProducts();
                    break;
                case "2":
                    addProduct();
                    break;
                case "3":
                    deleteProduct();
                    break;
                case "4":
                    sortByPrice();
                    break;
                case "5":
                    showCategoryReport();
                    break;
                case "6":
                    exportToCSV();
                    break;
                case "7":
                    editProduct();
                    break;
                case "0":
                    System.out.println("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...");
                    return;
                default:
                    System.out.println(" –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
            }
        }
    }

    private void showAllProducts() {
        List<Product> products = productService.getAllProducts();
        if (products.isEmpty()) {
            System.out.println("–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.");
        } else {
            for (Product p : products) {
                System.out.println(" ID: " + p.getId() + " | " + p.getName() +
                        " | üí∞ " + p.getPrice() + "—Å–æ–º | –ö–æ–ª-–≤–æ: " + p.getQuantity());
            }
        }
        pause();
    }

    private void addProduct() {
        System.out.print("–ù–∞–∑–≤–∞–Ω–∏–µ: ");
        String name = scanner.nextLine();

        System.out.print("–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: ");
        String serial = scanner.nextLine();

        System.out.print("–¶–µ–Ω–∞: ");
        double price = Double.parseDouble(scanner.nextLine());

        System.out.print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ");
        int quantity = Integer.parseInt(scanner.nextLine());

        System.out.print("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ");
        String category = scanner.nextLine();

        Product p = new Product(name, serial, price, quantity, category);
        productService.addProduct(p);
    }

    private void deleteProduct() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
        int id = Integer.parseInt(scanner.nextLine());
        productService.deleteProductById(id);
    }

    private void pause() {
        System.out.println("\n –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...");
        scanner.nextLine();
    }

    private void sortByPrice() {
        List<Product> products = productService.getAllProducts();
        if (products.isEmpty()) {
            System.out.println("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        } else {
            products.sort((a, b) -> Double.compare(a.getPrice(), b.getPrice()));
            System.out.println("\n–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ:");
            for (Product p : products) {
                System.out.println("üí∞ " + p.getPrice() + " ‚Äî " + p.getName());
            }
        }
        pause();
    }

    private void showCategoryReport() {
        List<Product> products = productService.getAllProducts();
        if (products.isEmpty()) {
            System.out.println("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.");
            return;
        }

        Map<String, Integer> categoryCount = new HashMap<>();
        for (Product p : products) {
            categoryCount.put(
                    p.getCategory(),
                    categoryCount.getOrDefault(p.getCategory(), 0) + 1
            );
        }

        System.out.println("\n–û—Ç—á—ë—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:");
        for (Map.Entry<String, Integer> entry : categoryCount.entrySet()) {
            System.out.println("üè∑Ô∏è " + entry.getKey() + " ‚Üí " + entry.getValue() + " —Ç–æ–≤–∞—Ä(–æ–≤)");
        }

        pause();
    }

    private void exportToCSV() {
        List<Product> products = productService.getAllProducts();
        if (products.isEmpty()) {
            System.out.println("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.");
            pause();
            return;
        }

        try (PrintWriter writer = new PrintWriter(new FileWriter("products.csv"))) {
            writer.println("ID,Name,SerialNumber,Price,Quantity,Category");

            for (Product p : products) {
                writer.printf("%d,%s,%s,%.2f,%d,%s%n",
                        p.getId(),
                        p.getName(),
                        p.getSerialNumber(),
                        p.getPrice(),
                        p.getQuantity(),
                        p.getCategory()
                );
            }

            System.out.println("–§–∞–π–ª products.csv —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.");
        } catch (IOException e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV: " + e.getMessage());
        }

        pause();
    }

    private void editProduct() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ");
        int id = Integer.parseInt(scanner.nextLine());

        List<Product> all = productService.getAllProducts();
        Product target = all.stream()
                .filter(p -> p.getId() == id)
                .findFirst()
                .orElse(null);

        if (target == null) {
            System.out.println("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            pause();
            return;
        }

        System.out.println("–û—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –º–µ–Ω—è—Ç—å.");

        System.out.print("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ [" + target.getName() + "]: ");
        String name = scanner.nextLine();
        if (!name.isBlank()) target.setName(name);

        System.out.print("–ù–æ–≤—ã–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä [" + target.getSerialNumber() + "]: ");
        String serial = scanner.nextLine();
        if (!serial.isBlank()) target.setSerialNumber(serial);

        System.out.print("–ù–æ–≤–∞—è —Ü–µ–Ω–∞ [" + target.getPrice() + "]: ");
        String priceStr = scanner.nextLine();
        if (!priceStr.isBlank()) target.setPrice(Double.parseDouble(priceStr));

        System.out.print("–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ [" + target.getQuantity() + "]: ");
        String qtyStr = scanner.nextLine();
        if (!qtyStr.isBlank()) target.setQuantity(Integer.parseInt(qtyStr));

        System.out.print("–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è [" + target.getCategory() + "]: ");
        String category = scanner.nextLine();
        if (!category.isBlank()) target.setCategory(category);

        productService.updateProduct(target);
        System.out.println("–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω.");
        pause();
    }


}
